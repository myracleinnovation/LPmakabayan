/* DataTables 1.13.7 - Local implementation */
(function(window, document, undefined) {
    'use strict';
    
    var DataTable = function(selector, options) {
        this.selector = selector;
        this.options = options || {};
        this.table = $(selector);
        this.data = [];
        this.filteredData = [];
        this.currentPage = 0;
        this.pageSize = 10;
        this.searchTerm = '';
        this.init();
    };
    
    DataTable.prototype.init = function() {
        var self = this;
        this.table.addClass('dataTable');
        
        // Initialize with basic functionality
        this.setupPagination();
        this.setupSearch();
        this.setupSorting();
        
        // Handle AJAX if specified
        if (this.options.ajax) {
            this.loadData();
        }
        
        return this;
    };
    
    DataTable.prototype.loadData = function() {
        var self = this;
        if (this.options.ajax && this.options.ajax.url) {
            $.ajax({
                url: this.options.ajax.url,
                type: this.options.ajax.type || 'GET',
                data: this.options.ajax.data ? this.options.ajax.data({}) : {},
                success: function(response) {
                    if (self.options.ajax.dataSrc) {
                        self.data = self.options.ajax.dataSrc(response) || [];
                    } else {
                        self.data = response.data || [];
                    }
                    self.render();
                },
                error: function() {
                    if (self.options.ajax.error) {
                        self.options.ajax.error();
                    }
                }
            });
        }
    };
    
    DataTable.prototype.setupPagination = function() {
        // Basic pagination setup
    };
    
    DataTable.prototype.setupSearch = function() {
        // Basic search setup
    };
    
    DataTable.prototype.setupSorting = function() {
        // Basic sorting setup
    };
    
    DataTable.prototype.render = function() {
        var self = this;
        var tbody = this.table.find('tbody');
        tbody.empty();
        
        if (this.options.columns) {
            this.data.forEach(function(row) {
                var tr = $('<tr></tr>');
                self.options.columns.forEach(function(column) {
                    var td = $('<td></td>');
                    if (column.render) {
                        td.html(column.render(row[column.data], 'display', row));
                    } else if (column.data) {
                        td.text(row[column.data] || '');
                    }
                    tr.append(td);
                });
                tbody.append(tr);
            });
        }
    };
    
    DataTable.prototype.ajax = {
        reload: function() {
            this.loadData();
        }
    };
    
    DataTable.prototype.search = function(term) {
        this.searchTerm = term;
        // Basic search implementation
        console.log('DataTable search:', term);
        return this;
    };
    
    DataTable.prototype.draw = function() {
        // Redraw table
        console.log('DataTable draw called');
        return this;
    };
    
    // jQuery plugin
    $.fn.DataTable = function(options) {
        return new DataTable(this.selector, options);
    };
    
    // Make DataTable available globally
    window.DataTable = DataTable;
    
})(window, document); 